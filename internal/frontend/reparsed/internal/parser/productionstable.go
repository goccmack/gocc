// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/maxcalandrelli/gocc/internal/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func(interface{}, []Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Π<Grammar>	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Grammar : Π<LexicalPart> Π<SyntaxPart>	<< ast.NewGrammar(X[0], X[1]) >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewGrammar(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Grammar : Π<LexicalPart>	<< ast.NewGrammar(X[0], nil) >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewGrammar(X[0], nil)
		},
	},
	ProdTabEntry{
		String: `Grammar : Π<SyntaxPart>	<< ast.NewGrammar(nil, X[0]) >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewGrammar(nil, X[0])
		},
	},
	ProdTabEntry{
		String: `LexicalPart : Π<LexProductions>	<< ast.NewLexPart(nil, nil, X[0]) >>`,
		Id:         "LexicalPart",
		NTType:     2,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexPart(nil, nil, X[0])
		},
	},
	ProdTabEntry{
		String: `LexProductions : Π<LexProduction>	<< ast.NewLexProductions(X[0]) >>`,
		Id:         "LexProductions",
		NTType:     4,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexProductions(X[0])
		},
	},
	ProdTabEntry{
		String: `LexProductions : Π<LexProductions> Π<LexProduction>	<< ast.AppendLexProduction(X[0], X[1]) >>`,
		Id:         "LexProductions",
		NTType:     4,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AppendLexProduction(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `LexProduction : tokId Λ<:> Π<LexPattern> Λ<;>	<< ast.NewLexTokDef(X[0], X[2]) >>`,
		Id:         "LexProduction",
		NTType:     5,
		Index:      7,
		NumSymbols: 4,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexTokDef(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `LexProduction : regDefId Λ<:> Π<LexPattern> Λ<;>	<< ast.NewLexRegDef(X[0], X[2]) >>`,
		Id:         "LexProduction",
		NTType:     5,
		Index:      8,
		NumSymbols: 4,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexRegDef(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `LexProduction : ignoredTokId Λ<:> Π<LexPattern> Λ<;>	<< ast.NewLexIgnoredTokDef(X[0], X[2]) >>`,
		Id:         "LexProduction",
		NTType:     5,
		Index:      9,
		NumSymbols: 4,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexIgnoredTokDef(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `LexPattern : Π<LexAlt>	<< ast.NewLexPattern(X[0]) >>`,
		Id:         "LexPattern",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexPattern(X[0])
		},
	},
	ProdTabEntry{
		String: `LexPattern : Π<LexPattern> Λ<|> Π<LexAlt>	<< ast.AppendLexAlt(X[0], X[2]) >>`,
		Id:         "LexPattern",
		NTType:     6,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AppendLexAlt(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `LexAlt : Π<LexTerm>	<< ast.NewLexAlt(X[0]) >>`,
		Id:         "LexAlt",
		NTType:     7,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexAlt(X[0])
		},
	},
	ProdTabEntry{
		String: `LexAlt : Π<LexAlt> Π<LexTerm>	<< ast.AppendLexTerm(X[0], X[1]) >>`,
		Id:         "LexAlt",
		NTType:     7,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AppendLexTerm(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<.>	<< ast.LexDOT, nil >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.LexDOT, nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : char_lit	<< ast.NewLexCharLitExt(X[0],false) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexCharLitExt(X[0], false)
		},
	},
	ProdTabEntry{
		String: `LexTerm : char_lit Λ<-> char_lit	<< ast.NewLexCharRangeExt(X[0], X[2],false) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexCharRangeExt(X[0], X[2], false)
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<~> char_lit	<< ast.NewLexCharLitExt(X[0], true) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      17,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexCharLitExt(X[0], true)
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<~> Λ<(> char_lit Λ<-> char_lit Λ<)>	<< ast.NewLexCharRangeExt(X[2], X[4], true) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      18,
		NumSymbols: 6,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexCharRangeExt(X[2], X[4], true)
		},
	},
	ProdTabEntry{
		String: `LexTerm : regDefId	<< ast.NewLexRegDefId(X[0]) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexRegDefId(X[0])
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<[> Π<LexPattern> Λ<]>	<< ast.NewLexOptPattern(X[1]) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexOptPattern(X[1])
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<{> Π<LexPattern> Λ<}>	<< ast.NewLexRepPattern(X[1]) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexRepPattern(X[1])
		},
	},
	ProdTabEntry{
		String: `LexTerm : Λ<(> Π<LexPattern> Λ<)>	<< ast.NewLexGroupPattern(X[1]) >>`,
		Id:         "LexTerm",
		NTType:     8,
		Index:      22,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewLexGroupPattern(X[1])
		},
	},
	ProdTabEntry{
		String: `SyntaxPart : Π<FileHeader> Π<SyntaxProdList>	<< ast.NewSyntaxPart(X[0], X[1]) >>`,
		Id:         "SyntaxPart",
		NTType:     3,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxPart(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `SyntaxPart : Π<SyntaxProdList>	<< ast.NewSyntaxPart(nil, X[0]) >>`,
		Id:         "SyntaxPart",
		NTType:     3,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxPart(nil, X[0])
		},
	},
	ProdTabEntry{
		String: `FileHeader : g_sdt_lit	<< ast.NewFileHeader(X[0]) >>`,
		Id:         "FileHeader",
		NTType:     9,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewFileHeader(X[0])
		},
	},
	ProdTabEntry{
		String: `SyntaxProdList : Π<SyntaxProduction>	<< ast.NewSyntaxProdList(X[0]) >>`,
		Id:         "SyntaxProdList",
		NTType:     10,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxProdList(X[0])
		},
	},
	ProdTabEntry{
		String: `SyntaxProdList : Π<SyntaxProdList> Π<SyntaxProduction>	<< ast.AddSyntaxProds(X[0], X[1]) >>`,
		Id:         "SyntaxProdList",
		NTType:     10,
		Index:      27,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AddSyntaxProds(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `SyntaxProduction : prodId Λ<:> Π<Alternatives> Λ<;>	<< ast.NewSyntaxProd(X[0], X[2]) >>`,
		Id:         "SyntaxProduction",
		NTType:     11,
		Index:      28,
		NumSymbols: 4,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxProd(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Alternatives : Π<SyntaxBody>	<< ast.NewSyntaxAlts(X[0]) >>`,
		Id:         "Alternatives",
		NTType:     12,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxAlts(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternatives : Π<Alternatives> Λ<|> Π<SyntaxBody>	<< ast.AddSyntaxAlt(X[0], X[2]) >>`,
		Id:         "Alternatives",
		NTType:     12,
		Index:      30,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AddSyntaxAlt(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<Symbols>	<< ast.NewSyntaxBodyGen(X[0], nil) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxBodyGen(X[0], nil)
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<Symbols> g_sdt_lit	<< ast.NewSyntaxBodyGen(X[0], X[1]) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      32,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxBodyGen(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<ErrorSymbol>	<< ast.NewErrorBodyGen(nil, nil) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewErrorBodyGen(nil, nil)
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<ErrorSymbol> Π<Symbols>	<< ast.NewErrorBodyGen(X[1], nil) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewErrorBodyGen(X[1], nil)
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<ErrorSymbol> Π<Symbols> g_sdt_lit	<< ast.NewErrorBodyGen(X[1], X[2]) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewErrorBodyGen(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<ErrorSymbol> g_sdt_lit	<< ast.NewErrorBodyGen(nil, X[1]) >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewErrorBodyGen(nil, X[1])
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Π<EpsilonSymbol>	<< ast.NewEmptyBodyGen() >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewEmptyBodyGen()
		},
	},
	ProdTabEntry{
		String: `Symbols : Π<Symbol>	<< ast.NewSyntaxSymbols(X[0]) >>`,
		Id:         "Symbols",
		NTType:     14,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxSymbols(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbols : Π<Symbols> Π<Symbol>	<< ast.AddSyntaxSymbol(X[0], X[1]) >>`,
		Id:         "Symbols",
		NTType:     14,
		Index:      39,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AddSyntaxSymbol(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Symbol : prodId	<< ast.NewSyntaxProdId(X[0]) >>`,
		Id:         "Symbol",
		NTType:     17,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewSyntaxProdId(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : tokId	<< ast.NewTokId(X[0]) >>`,
		Id:         "Symbol",
		NTType:     17,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewTokId(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : string_lit	<< ast.NewStringLit(X[0]) >>`,
		Id:         "Symbol",
		NTType:     17,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewStringLit(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : tokId g_ctxdep_lit	<< ast.NewContextDependentTokId(X[0],X[1]) >>`,
		Id:         "Symbol",
		NTType:     17,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewContextDependentTokId(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ErrorSymbol : Λ<error>	<<  >>`,
		Id:         "ErrorSymbol",
		NTType:     15,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ErrorSymbol : Λ<λ>	<<  >>`,
		Id:         "ErrorSymbol",
		NTType:     15,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EpsilonSymbol : Λ<empty>	<<  >>`,
		Id:         "EpsilonSymbol",
		NTType:     16,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EpsilonSymbol : Λ<ε>	<<  >>`,
		Id:         "EpsilonSymbol",
		NTType:     16,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
}
