//Copyright 2013 Vastech SA (PTY) LTD
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package golang

import (
	"bytes"
	"path"
	"text/template"

	"github.com/maxcalandrelli/gocc/internal/config"
	"github.com/maxcalandrelli/gocc/internal/io"
	"github.com/maxcalandrelli/gocc/internal/lexer/items"
)

func genLexer(pkg, outDir string, itemsets *items.ItemSets, cfg config.Config, subpath string) {
	tmpl, err := template.New("lexer").Parse(lexerSrc[1:])
	if err != nil {
		panic(err)
	}
	buf := new(bytes.Buffer)
	err = tmpl.Execute(buf, getLexerData(pkg, outDir, itemsets, cfg, subpath))
	if err != nil {
		panic(err)
	}
	io.WriteFile(path.Join(outDir, subpath, "lexer", "lexer.go"), buf.Bytes())
}

func getLexerData(pkg, outDir string, itemsets *items.ItemSets, cfg config.Config, subpath string) *lexerData {
	lexSymbols := itemsets.Symbols().List()
	return &lexerData{
		Debug:        cfg.DebugLexer(),
		TokenImport:  path.Join(pkg, subpath, "token"),
		UtilImport:   path.Join(pkg, subpath, "util"),
		StreamImport: path.Join(pkg, subpath, "io/stream"),
		NumStates:    itemsets.Size(),
		NumSymbols:   len(lexSymbols),
		Symbols:      lexSymbols,
	}
}

type lexerData struct {
	Debug        bool
	TokenImport  string
	UtilImport   string
	StreamImport string
	NumStates    int
	NumSymbols   int
	NextState    []byte
	Symbols      []string
}

const lexerSrc string = `
// Code generated by gocc; DO NOT EDIT.

package lexer

import (
{{if .Debug}}	"fmt"
{{end}}
  "io"
  "bytes"
  "os"

{{if .Debug}}	"{{.UtilImport}}"
{{end}}
"{{.TokenImport}}"
"{{.StreamImport}}"
)

const (
	NoState    = -1
	NumStates  = {{.NumStates}}
	NumSymbols = {{.NumSymbols}}
)

type position struct {
	token.Pos
	StreamPosition int64
}

type Lexer struct {
	position
	stream token.TokenStream
	eof    bool
}

func NewLexerBytes(src []byte) *Lexer {
	lexer := &Lexer{stream: bytes.NewReader(src)}
	lexer.position.Reset()
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	s, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	lexer := &Lexer{stream: stream.NewWindowReader(s)}
	lexer.position.Reset()
	return lexer, nil
}

func NewLexer(reader io.Reader) (*Lexer, error) {
	lexer := &Lexer{}
	lexer.position.Reset()
	if lexer.stream, _ = reader.(token.TokenStream); lexer.stream == nil {
		lexer.stream = stream.NewWindowReader(reader)
	} else {
		lexer.position.StreamPosition, _ = lexer.stream.Seek(0, io.SeekCurrent)
	}
	return lexer, nil
}

func (l Lexer) GetStream() io.Reader {
  return l.stream
}

func (l *Lexer) Scan() (tok *token.Token) {
	{{- if .Debug}}
	fmt.Printf("Lexer.Scan() pos=%d\n", l.position.Pos.Offset)
	{{- end}}
	tok = new(token.Token)
	if l.eof {
		tok.Type = token.EOF
		tok.Pos = l.position.Pos
		return
	}
	l.position.StreamPosition, _ = l.stream.Seek(0, io.SeekCurrent)
	start, end := l.position, position{}
	tok.Type = token.INVALID
	tok.Lit = []byte{}
	state, rune1 := 0, rune(-1)
	for state != -1 {
		{{- if .Debug}}
		fmt.Printf("\tpos=%d, line=%d, col=%d, state=%d\n", l.position.Pos.Offset, l.position.Pos.Line, l.position.Pos.Column, state)
		{{- end}}
		if l.eof {
			rune1 = -1
		} else {
			rune2, size, err := l.stream.ReadRune()
			if err == io.EOF {
				l.eof = true
				err = nil
			}
			if err == nil && size > 0 {
				rune1 = rune2
				l.position.StreamPosition += int64(size)
				l.position.Pos.Offset += size
			}
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		{{- if .Debug}}
		fmt.Printf("\tS%d, : tok=%s, rune == %s(%x), next state == %d\n", state, token.TokMap.Id(tok.Type), util.RuneToString(rune1), rune1, nextState)
		fmt.Printf("\t\tpos=%d, size=%d, start=%d, end=%d\n", l.position.Pos.Offset, size, start.position.Pos.Offset, end.position.Pos.Offset)
		if nextState != -1 {
			fmt.Printf("\t\taction:%s\n", ActTab[nextState].String())
		}
		{{- end}}
		state = nextState

		if state != -1 {
			switch rune1 {
			case '\n':
				l.position.Pos.Line++
				l.position.Pos.Column = 1
			case '\r':
				l.position.Pos.Column = 1
			case '\t':
				l.position.Pos.Column += 4
			default:
				l.position.Pos.Column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				l.position.StreamPosition, _ = l.stream.Seek(0, io.SeekCurrent)
				end = l.position
				tok.Lit = append(tok.Lit, string(rune1)...)
			case ActTab[state].Ignore != "":
				start = l.position
				state = 0
				tok.Lit = []byte{}
				if l.eof {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.position
			}
		}
	}
	if end.Pos.Offset > start.Pos.Offset {
		l.Reposition(end)
	}
	tok.Pos = start.Pos
	{{- if .Debug}}
	fmt.Printf("Token at %s: %s \"%s\"\n", tok.String(), token.TokMap.Id(tok.Type), tok.Lit)
	{{- end}}
	return
}

func (l *Lexer) Reset() {
	l.position.Reset()
}

func (l *Lexer) Reposition(p position) {
	l.position = p
	l.stream.Seek(l.position.StreamPosition, io.SeekStart)
}

func (l Lexer) CurrentPosition() position {
	return l.position
}

func (p *position) Reset() {
	p.Offset = 0
	p.Line = 1
	p.Column = 1
}

func (p position) StartingFrom(base position) position {
	r := p
	r.Pos = p.Pos.StartingFrom(base.Pos)
	return r
}
`
