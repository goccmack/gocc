// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/maxcalandrelli/gocc/example/calc/calc.grammar/calc/internal/token"
	"github.com/maxcalandrelli/gocc/example/calc/calc.grammar/calc/internal/util"
	"strings"
)

func getString(X Attrib) string {
	switch X.(type) {
	case *token.Token:
		return string(X.(*token.Token).Lit)
	case string:
		return X.(string)
	}
	return fmt.Sprintf("%q", X)
}

func unescape(s string) string {
	return util.EscapedString(s).Unescape()
}

func unquote(s string) string {
	r, _, _ := util.EscapedString(s).Unquote()
	return r
}

func lc(s string) string {
	return strings.ToLower(s)
}

func uc(s string) string {
	return strings.ToUpper(s)
}

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func(interface{}, []Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Π<Calc>	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Calc : Π<Expr>	<<  >>`,
		Id:         "Calc",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : Π<Term> Λ<+> Π<Term>	<< $0.(int64) + $2.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64) + X[2].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Expr : Π<Term> Λ<-> Π<Term>	<< $0.(int64) - $2.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64) - X[2].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Expr : Λ<-> Π<Term>	<< -$1.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return -X[1].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Expr : Π<Term> Λ<*> Π<Factor>	<< $0.(int64) * $2.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64) * X[2].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Expr : Π<Term> Λ</> Π<Factor>	<< $0.(int64) / $2.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      6,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64) / X[2].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Expr : Π<Term>	<< $0.(int64), nil >>`,
		Id:         "Expr",
		NTType:     2,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Term : Π<Term> Λ<*> Π<Factor>	<< $0.(int64) * $2.(int64), nil >>`,
		Id:         "Term",
		NTType:     3,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0].(int64) * X[2].(int64), nil
		},
	},
	ProdTabEntry{
		String: `Term : Π<Factor>	<<  >>`,
		Id:         "Term",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Λ<(> Π<Expr> Λ<)>	<< $1, nil >>`,
		Id:         "Factor",
		NTType:     4,
		Index:      10,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Factor : int64	<< util.IntValue($0.(*token.Token).Lit) >>`,
		Id:         "Factor",
		NTType:     4,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return util.IntValue(X[0].(*token.Token).Lit)
		},
	},
}
