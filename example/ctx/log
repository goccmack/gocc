gocc ctx.bnf
sdt: <ast.NewStmtList($0:s)>
SDT: <$0> => <X[0]>
sdt: <ast.AppendStmt($0, $1:s)>
SDT: <$0> => <X[0]>
SDT: <$1> => <X[1]>
sdt: <ast.NewStmt($0:s)>
SDT: <$0> => <X[0]>
sdt: <ast.CalcResult($2)>
SDT: <$2> => <X[2]>
panic: 75:31: missing ',' in argument list (and 2 more errors) in
// Code generated by gocc; DO NOT EDIT.

package parser

import (
		"github.com/maxcalandrelli/gocc/example/ctx/ast"
	)

import (
  "fmt"
  "strings"
  "github.com/maxcalandrelli/gocc/example/ctx/ctx.grammar/ctx/internal/token"
  "github.com/maxcalandrelli/gocc/example/ctx/ctx.grammar/ctx/internal/util"
)

func getString(X Attrib) string {
  switch X.(type) {
    case *token.Token: return string(X.(*token.Token).Lit)
    case string: return X.(string)
  }
  return fmt.Sprintf("%q", X)
}

func unescape(s string) string {
  return util.EscapedString(s).Unescape()
}

func unquote(s string) string {
  r, _, _ := util.EscapedString(s).Unquote()
  return r
}

func lc(s string) string {
  return strings.ToLower(s)
}

func uc(s string) string {
  return strings.ToUpper(s)
}


type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func(interface{}, []Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Π<StmtList>	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StmtList : Π<Stmt>	<< ast.NewStmtList($0:s) >>`,
		Id:         "StmtList",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewStmtList(X[0]:s)
		},
	},
	ProdTabEntry{
		String: `StmtList : Π<StmtList> Π<Stmt>	<< ast.AppendStmt($0, $1:s) >>`,
		Id:         "StmtList",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AppendStmt(X[0], X[1]:s)
		},
	},
	ProdTabEntry{
		String: `Stmt : id	<< ast.NewStmt($0:s) >>`,
		Id:         "Stmt",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewStmt(X[0]:s)
		},
	},
	ProdTabEntry{
		String: `Stmt : Λ<calc> μ<calc_0>	<< ast.CalcResult($2) >>`,
		Id:         "Stmt",
		NTType:     2,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.CalcResult(X[2])
		},
	},
}


goroutine 1 [running]:
github.com/maxcalandrelli/gocc/internal/parser/gen/golang.GenProductionsTable(0xc000016440, 0x3a, 0xc000022230, 0x4b, 0xc000016500, 0x3e, 0xc000077410, 0x5, 0x6, 0xc00009c3c0, ...)
	/home/max/go/src/github.com/maxcalandrelli/gocc/internal/parser/gen/golang/productionstable.go:54 +0x67f
github.com/maxcalandrelli/gocc/internal/parser/gen.Gen(0xc000016440, 0x3a, 0xc000022230, 0x4b, 0xc000016500, 0x3e, 0xc000077410, 0x5, 0x6, 0xc00009c3c0, ...)
	/home/max/go/src/github.com/maxcalandrelli/gocc/internal/parser/gen/gen.go:37 +0x346
main.main()
	/home/max/go/src/github.com/maxcalandrelli/gocc/main.go:230 +0x92b
Makefile:2: recipe for target 'regenerate' failed
make: *** [regenerate] Error 2
