// Code generated by gocc; DO NOT EDIT.

package lexer

/*
Let s be the current state
Let r be the current input rune
transitionTable[s](r) returns the next state.
*/
type TransitionTable [NumStates]func(rune) int

var TransTab = TransitionTable{
	// S0
	func(r rune) int {
		switch {
		case r == 9: // ['\t','\t']
			return 1
		case r == 10: // ['\n','\n']
			return 1
		case r == 13: // ['\r','\r']
			return 1
		case r == 32: // [' ',' ']
			return 1
		case 65 <= r && r <= 90: // ['A','Z']
			return 2
		case r == 95: // ['_','_']
			return 3
		case 97 <= r && r <= 98: // ['a','b']
			return 2
		case r == 99: // ['c','c']
			return 4
		case 100 <= r && r <= 122: // ['d','z']
			return 2
		}
		return NoState
	},
	// S1
	func(r rune) int {
		switch {
		}
		return NoState
	},
	// S2
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
	// S3
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
	// S4
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case r == 97: // ['a','a']
			return 8
		case 98 <= r && r <= 122: // ['b','z']
			return 6
		}
		return NoState
	},
	// S5
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
	// S6
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
	// S7
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
	// S8
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 107: // ['a','k']
			return 6
		case r == 108: // ['l','l']
			return 9
		case 109 <= r && r <= 122: // ['m','z']
			return 6
		}
		return NoState
	},
	// S9
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 98: // ['a','b']
			return 6
		case r == 99: // ['c','c']
			return 10
		case 100 <= r && r <= 122: // ['d','z']
			return 6
		}
		return NoState
	},
	// S10
	func(r rune) int {
		switch {
		case 48 <= r && r <= 57: // ['0','9']
			return 5
		case 65 <= r && r <= 90: // ['A','Z']
			return 6
		case r == 95: // ['_','_']
			return 7
		case 97 <= r && r <= 122: // ['a','z']
			return 6
		}
		return NoState
	},
}
