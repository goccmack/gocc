// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	cdFunc      func(TokenStream, interface{}) (interface{}, error, []byte)
	cdAction    struct {
		tokenIndex   int
		tokenScanner cdFunc
	}
	actionRow struct {
		canRecover bool
		actions    [numSymbols]action
		cdActions  []cdAction
	}
	actions struct {
		table actionTable
	}
)

var parserActions = actions{
	table: actionTable{
		actionRow{ // S0
			canRecover: false,
			actions: [numSymbols]action{
				nil,      // ά<INVALID>
				nil,      // Ω<EOF>
				shift(4), // a
				shift(5), // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S1
			canRecover: false,
			actions: [numSymbols]action{
				nil,          // ά<INVALID>
				accept(true), // Ω<EOF>
				nil,          // a
				nil,          // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S2
			canRecover: false,
			actions: [numSymbols]action{
				nil,       // ά<INVALID>
				reduce(1), // Ω<EOF>, reduce: RR
				shift(6),  // a
				nil,       // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S3
			canRecover: false,
			actions: [numSymbols]action{
				nil,       // ά<INVALID>
				reduce(2), // Ω<EOF>, reduce: RR
				nil,       // a
				nil,       // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S4
			canRecover: false,
			actions: [numSymbols]action{
				nil,       // ά<INVALID>
				reduce(3), // Ω<EOF>, reduce: B
				reduce(4), // a, reduce: A
				nil,       // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S5
			canRecover: false,
			actions: [numSymbols]action{
				nil,       // ά<INVALID>
				reduce(6), // Ω<EOF>, reduce: A
				reduce(6), // a, reduce: A
				nil,       // c
			},
			cdActions: []cdAction{},
		},
		actionRow{ // S6
			canRecover: false,
			actions: [numSymbols]action{
				nil,       // ά<INVALID>
				reduce(5), // Ω<EOF>, reduce: A
				reduce(5), // a, reduce: A
				nil,       // c
			},
			cdActions: []cdAction{},
		},
	},
}
