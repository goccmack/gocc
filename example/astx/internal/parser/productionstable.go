// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/maxcalandrelli/gocc/example/astx/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func(interface{}, []Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Π<StmtList>	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StmtList : Π<Stmt>	<< ast.NewStmtList(X[0]) >>`,
		Id:         "StmtList",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewStmtList(X[0])
		},
	},
	ProdTabEntry{
		String: `StmtList : Π<StmtList> Π<Stmt>	<< ast.AppendStmt(X[0], X[1]) >>`,
		Id:         "StmtList",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.AppendStmt(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Stmt : id	<< ast.NewStmt(X[0]) >>`,
		Id:         "Stmt",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(Context interface{}, X []Attrib) (Attrib, error) {
			return ast.NewStmt(X[0])
		},
	},
}
