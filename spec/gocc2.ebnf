//Copyright 2013 Vastech SA (PTY) LTD
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

!comment      : _lineComment | _blockComment ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

_lineComment : '/' '/' {.} '\n' ;
_blockComment : '/' '*' {. | '*'} '*' '/' ;
_tokId : _lowcase {_id_char} ;
_lowcase : 'a'-'z' ;
_id_char : _upcase | _lowcase | '_' | _digit ;
_upcase : 'A'-'Z' ;
_digit : '0'-'9' ;

_unicode_value
    : .                   // Any UTF-8 character literal
    | _little_u_value
    | _big_u_value
    | _escaped_char
    ;

_byte_value
    : _octal_byte_value
    | _hex_byte_value
    ;

_little_u_value
    : '\\' 'u' _hex_digit _hex_digit _hex_digit _hex_digit
    ;

_big_u_value
    : '\\' 'U' _hex_digit _hex_digit _hex_digit _hex_digit
               _hex_digit _hex_digit _hex_digit _hex_digit
    ;

_escaped_char
    : '\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '\'' | '"' )
    ;

_octal_byte_value
    : '\\' _octal_digit _octal_digit _octal_digit
    ;

_hex_byte_value
    : '\\' 'x' _hex_digit _hex_digit
    ;

_octal_digit
    : '0' - '7'
    ;

_hex_digit
    : '0' - '9'
    | 'A' - 'F'
    | 'a' - 'f'
    ;

_raw_string
    : '`' {.} '`'
    ;

_interpreted_string
    : '"' { _unicode_value | _byte_value } '"'
    ;



tokId : _tokId ;

regDefId : '_' {_id_char} ;

ignoredTokId : '!' _tokId ;

char_lit : '\'' (_unicode_value | _byte_value) '\''    ;

prodId
    : _upcase {_id_char}
    ;

g_sdt_lit
    : '<' '<' . {.} '>' '>'
    ;

g_ctxdep_lit
    : '@' '<' . {.} '>' '@'
    ;


string_lit
    : _raw_string
    | _interpreted_string
    ;



/*** Syntactic items ***/

<< import "github.com/maxcalandrelli/gocc/internal/ast" >>

Grammar :
		LexicalPart
		SyntaxPart
			<< ast.NewGrammar($0, $1) >>
	|
		LexicalPart
			<< ast.NewGrammar($0, nil) >>
	|
		SyntaxPart
			<< ast.NewGrammar(nil, $0) >>
;

LexicalPart	:
		LexProductions
			<< ast.NewLexPart(nil, nil, $0) >>
;

LexProductions :
		LexProduction
			<< ast.NewLexProductions($0) >>
	|
		LexProductions
		LexProduction
			<< ast.AppendLexProduction($0, $1) >>
;

LexProduction :
		tokId
		":"
		LexPattern
		";"
			<< ast.NewLexTokDef($0, $2) >>
	|
		regDefId
		":"
		LexPattern
		";"
			<< ast.NewLexRegDef($0, $2) >>
	|
		ignoredTokId
		":"
		LexPattern
		";"
			<< ast.NewLexIgnoredTokDef($0, $2) >>
;

LexPattern :
		LexAlt
			<< ast.NewLexPattern($0) >>
	|
		LexPattern
		"|"
		LexAlt
			<< ast.AppendLexAlt($0, $2) >>
;

LexAlt :
		LexTerm
			<< ast.NewLexAlt($0) >>
	|
		LexAlt
		LexTerm
			<< ast.AppendLexTerm($0, $1) >>
;

LexTerm :
		"."
			<< ast.LexDOT, nil >>
	|
		char_lit
			<< ast.NewLexCharLitExt($0,false) >>
	|
		char_lit "-" char_lit
			<< ast.NewLexCharRangeExt($0, $2,false) >>
	|
		"~" char_lit
			<< ast.NewLexCharLitExt($0, true) >>
	|
		"~" "(" char_lit "-" char_lit ")"
			<< ast.NewLexCharRangeExt($2, $4, true) >>
	|
		regDefId
			<< ast.NewLexRegDefId($0) >>
	|
		"["
		LexPattern
		"]"
			<< ast.NewLexOptPattern($1) >>
	|
		"{"
		LexPattern
		"}"
			<< ast.NewLexRepPattern($1) >>
	|
		"("
		LexPattern
		")"
			<< ast.NewLexGroupPattern($1) >>
;

SyntaxPart :
		FileHeader
		SyntaxProdList
			<< ast.NewSyntaxPart($0, $1) >>
	|
		SyntaxProdList
			<< ast.NewSyntaxPart(nil, $0) >>
;

FileHeader :
		g_sdt_lit
			<< ast.NewFileHeader($0) >>
;

SyntaxProdList :
		SyntaxProduction
			<< ast.NewSyntaxProdList($0) >>
	|
		SyntaxProdList
		SyntaxProduction
			<< ast.AddSyntaxProds($0, $1) >>
;

SyntaxProduction	:
		prodId
		":"
		Alternatives
		";"
			<< ast.NewSyntaxProd($0, $2) >>
;

Alternatives	:
		SyntaxBody
			<< ast.NewSyntaxAlts($0) >>
	|
		Alternatives
		"|"
		SyntaxBody
			<< ast.AddSyntaxAlt($0, $2) >>
;

SyntaxBody :
		Symbols
			<< ast.NewSyntaxBodyGen($0, nil) >>
	|
		Symbols g_sdt_lit
			<< ast.NewSyntaxBodyGen($0, $1) >>
	|
		ErrorSymbol
			<< ast.NewErrorBodyGen(nil, nil) >>
	|
		ErrorSymbol Symbols
			<< ast.NewErrorBodyGen($1, nil) >>
	|
		ErrorSymbol Symbols g_sdt_lit
			<< ast.NewErrorBodyGen($1, $2) >>
	|
		ErrorSymbol g_sdt_lit
			<< ast.NewErrorBodyGen(nil, $1) >>
	|
		EpsilonSymbol
			<< ast.NewEmptyBodyGen() >>
;

Symbols :
		Symbol
			<< ast.NewSyntaxSymbols($0) >>
	|
		Symbols
		Symbol
			<< ast.AddSyntaxSymbol($0, $1) >>
;

Symbol :
		prodId
			<< ast.NewSyntaxProdId($0) >>
	|
		tokId
			<< ast.NewTokId($0) >>
	|
		string_lit
			<< ast.NewStringLit($0) >>
	|
		tokId
		g_ctxdep_lit
			<< ast.NewContextDependentTokId($0,$1) >>
;

ErrorSymbol :
		"error"
	|
		"λ"
;

EpsilonSymbol :
		"empty"
	|
		"ε"
;

