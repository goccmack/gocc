!comment      : _lineComment | _blockComment ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

_lineComment : '$' '/' '/' {.} '\n' ;
_blockComment : '/' '*' {. | '*'} '*' '/' ;
_tokId : _lowcase {_id_char} ;
_lowcase : 'a'-'z' ;
_id_char : _upcase | _lowcase | '_' | _digit ;
_upcase : 'A'-'Z' ;
_digit : '0'-'9' ;


!space    :  ' ' | '\t' ;
hexdigit : '0'-'F'  | ~(':'-'@') ;

<<
import(
	"fmt"
)
>>

Test :
		Test1
;

Test1:
 "try" Test2  << $1, nil >>
;

Test2 : Test3 | Test1;

Test3 :
"not" "empty" << fmt.Printf("very well\n") >>
|
T
|
hexdigit
;

T : "a"  | "X" | ProdX | "λ1" | X;

ProdX : "empty" | "ε" | "λ" | empty  | ε ;

X:
		"!"
	| 	"hexdigit"
	|
		altro
		@@
				func () (interface {}, error, [] byte) {
					count := 0
					ret := []byte{}
					for {
						r, _, _ := Stream.ReadRune()
						switch r {
							case ' ', '\t':
								ret = append(ret, string(r)...)
							case '/':
								ret = append(ret, string(r)...)
								count++
							default:
								Stream.UnreadRune()
								fmt.Printf("count=%d rune=<%c> ret=<%s>\n", count, r, string(ret))
								return count, nil, ret
						}
					}
					return nil, nil, []byte{}
				}()
		@@
		Test2
			<<
				func () (interface{}, error) {
					fmt.Printf("$0=%#v\n$1=%#v\n", $0, $1)
					return "buongiorno", nil
				} ()
			>>
;

